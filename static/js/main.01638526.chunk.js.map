{"version":3,"sources":["serviceWorker.js","shared.js","Model.js","trackCanvas/track.js","trackCanvas/playBtn.js","trackCanvas/trackCanvas.js","index.js"],"names":["Boolean","window","location","hostname","match","quantizeNoteSequence","sequences","clone","STEPS_PER_BAR","STEPS_PER_QUARTER","reconstructBySize","inSeq","models","a","async","temperature","maxChunkSize","length","secondsPerStep","stepsPerQuarterToStepsPerSecond","tempos","qpm","outputs","startOffset","chunk","endOffset","Math","min","totalQuantizedSteps","notes","map","n","Object","assign","filter","quantizedStartStep","startTime","endTime","quantizedEndStep","totalTime","numBars","ceil","modelIndex","encode","z","decode","undefined","output","dispose","push","reconstruction","concat","args","seqA","seqB","outputSequence","forEach","note","clonedNote","shift","modelPath","Model","this","url","MusicVAE","model","initialize","snackbar","document","createElement","setAttribute","body","appendChild","Track","props","seq","ref","React","createRef","pianoRoll","mm","current","Component","PlayButton","player","onTogglePlay","Button","variant","onClick","console","log","isPlaying","stop","start","TrackCanvas","state","setState","run","PlayAllBtn","newSeq","combineSeqs","className","index","key","trackInfo","origin","Drummer","isFileLoaded","load","dropActiveClassName","onChange","files","then","drumify","drums","onError","error","file","code","message","accepts","multiple","maxFiles","maxFileSize","minFileSize","clickable","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":";oYAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,4BCAEC,EAAgCC,YAAhCD,qBAAsBE,EAAUD,YAAVC,MAExBC,EAAgB,GAChBC,EAAoB,EAWnB,SAAeC,EAAkBC,EAAOC,GAAxC,uCAAAC,EAAAC,OAAA,gDAAgDC,EAAhD,+BAA4D,EACjEJ,EAAQN,EAAqBM,EAAOF,GAG9BO,EAAeJ,EAAOK,OAAST,EAC/BU,EAAiB,EAAIZ,YAAUa,gCACjCV,EAAmBE,EAAMS,OAAO,GAAGC,KACjCC,EAAU,GAPX,WAQIC,GARJ,yBAAAV,EAAAC,OAAA,uDASGU,EAAQjB,EAAMI,GACdc,EAAYC,KAAKC,IAAIJ,EAAcP,EAAcL,EAAMiB,qBAC7DJ,EAAMK,MAAQlB,EAAMkB,MACjBC,KAAI,SAAAC,GAAC,OAAIC,OAAOC,OAAO,GAAIF,MAC3BG,QAAO,SAAAH,GAAC,OAAIR,GAAeQ,EAAEI,oBAAsBJ,EAAEI,mBAAqBV,KAC1EK,KAAI,SAAAC,GAKH,OAJAA,EAAEK,WAAab,EAAcL,EAC7Ba,EAAEM,SAAWd,EAAcL,EAC3Ba,EAAEI,oBAAsBZ,EACxBQ,EAAEO,kBAAoBf,EACfQ,KAEXP,EAAMI,oBAAsBH,EAAYF,EACxCC,EAAMe,UAAYf,EAAMI,oBAAsBV,EAGxCsB,EAAUd,KAAKe,KAAKjB,EAAMI,oBAAsBpB,GAChDkC,EAAaF,EAAU,EA1B1B,WAAA3B,EAAA,MA2BaD,EAAO8B,GAAYC,OAAO,CAACnB,KA3BxC,cA2BGoB,EA3BH,mBAAA/B,EAAA,MA4BkBD,EAAO8B,GAAYG,OAAOD,EAAG7B,OAAa+B,OAAWA,EAAWnC,EAAMS,OAAO,GAAGC,MA5BlG,QA4BG0B,EA5BH,OA6BHH,EAAEI,UACF1B,EAAQ2B,KAAKF,EAAO,IA9BjB,uCAQIxB,EAAc,EARlB,YAQqBA,EAAcZ,EAAMiB,qBARzC,oCAAAf,EAAA,QAQIU,IARJ,QAQ8DA,GAAaP,EAR3E,8BAgCCkC,EAAiBC,EAAM,WAAN,EAAU7B,GAhC5B,kBAiCE4B,GAjCF,sCAoCP,SAASC,IAAiB,IAAD,uBAANC,EAAM,yBAANA,EAAM,gBACvB,GAAoB,IAAhBA,EAAKnC,OAAa,CAAC,IACdoC,EAAcD,EADD,GACPE,EAAQF,EADD,GAEdG,EAAiBhD,EAAM8C,GAQ7B,OAPAC,EAAKzB,MAAM2B,SAAQ,SAAAC,GACjB,IAAMC,EAAa1B,OAAOC,OAAO,GAAIwB,GACrCC,EAAWtB,WAAaiB,EAAKd,UAC7BmB,EAAWrB,SAAWgB,EAAKd,UAC3BgB,EAAe1B,MAAMoB,KAAKS,MAE5BH,EAAehB,UAAYc,EAAKd,UAAYe,EAAKf,UAC1CgB,EACF,OAAIH,EAAKnC,OAAS,EAGhBkC,EADOC,EAAKO,QACER,EAAM,WAAN,EAAUC,IAGxBA,EAAK,GClEhB,IAAMQ,EAAY,4DAELC,EAAb,WACC,aAAe,oBAEd,IAAMjD,EAAS,CACdgD,EAAY,wBACZA,EAAY,wBACZA,EAAY,wBACZA,EAAY,yBAGbE,KAAKlD,OAASA,EAAOkB,KAAI,SAAAiC,GAAG,OAAI,IAAIC,WAASD,MAV/C,8JAeSD,KAAKG,MAAMC,cAfpB,wDAiBSC,EAAWC,SAASC,cAAc,qBAC/BC,aAAa,UAAtB,MACAF,SAASG,KAAKC,YAAYL,GAnB7B,wFAuBexD,GAvBf,2FAuBsBI,EAvBtB,+BAuBkC,EAvBlC,mBAwBeL,EAAkBC,EAAOmD,KAAKlD,OAAQG,IAxBrD,gG,sBCFe0D,E,YAhBb,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KACDC,IAAMD,EAAMC,IACjB,EAAKC,IAAMC,IAAMC,YAHA,E,iFAOjBhB,KAAKiB,UAAY,IAAIC,yBAA0BlB,KAAKa,IAAKb,KAAKc,IAAIK,W,+BAKjE,OAAO,yBAAKL,IAAKd,KAAKc,U,GAbPC,IAAMK,W,QC4BXC,E,YA3Bb,WAAYT,GAAQ,IAAD,8BACjB,4CAAMA,KACDU,OAASV,EAAMU,OACpB,EAAKT,IAAMD,EAAMC,IACjB,EAAKU,aAAeX,EAAMW,aAJT,E,sEAOV,IAAD,OAWL,OAAS,kBAACC,EAAA,EAAD,CACCC,QAAQ,UACRC,QAAS,kBAZCb,EAYiB,EAAKA,IAXzCc,QAAQC,IAAIf,GACP,EAAKS,OAAOO,YACd,EAAKP,OAAOQ,OAEZ,EAAKR,OAAOS,MAAMlB,QAEpB,EAAKU,eAPY,IAACV,IAcRb,KAAKsB,OAAOO,YAAY,OAAO,Y,GAvBvBd,IAAMK,WCsDhBY,G,kBAjDb,WAAYpB,GAAQ,IAAD,8BACjB,4CAAMA,KACDqB,MAAQ,CAAEJ,WAAU,GACzB,EAAKN,aAAe,WAAQ,EAAKW,SAAS,CAAEL,UAAW,EAAKP,OAAOO,eACnE,EAAKP,OAAS,IAAIJ,UAAU,EAAO,CACjCiB,IAAK,aACLL,KAAM,EAAKP,eAEb,EAAK/E,UAAYoE,EAAMpE,UARN,E,sEAWX,IAAD,OAcD4F,EAAapC,KAAKY,MAAMpE,UAAUW,OAAS,EAAE,kBAAC,EAAD,CAAY0D,IAZzC,SAACrE,GACnB,IAAI6F,EAASnE,OAAOC,OAAO,GAAI3B,EAAU,IACrCuB,EAAQ,GAGZ,OAFAvB,EAAUkD,SAAQ,SAACmB,GAAQ9C,EAAMoB,KAAN,MAAApB,EAAK,YAAS8C,EAAI9C,WAC7CsE,EAAOtE,MAAQA,EACRsE,EAOyDC,CAAYtC,KAAKY,MAAMpE,WAC5B8E,OAAQtB,KAAKsB,OACbC,aAAcvB,KAAKuB,eAAgB,GAEhG,OAAO,yBAAKgB,UAAU,oBACTvC,KAAKY,MAAMpE,UAAUwB,KAAI,SAAC6C,EAAK2B,GAC9B,OAAO,yBAAKD,UAAU,MAAME,IAAKD,GACvB,yBAAKD,UAAU,iBACb,kBAAC,EAAD,CAAY1B,IAAKA,EAAKS,OAAQ,EAAKA,OAAQC,aAAc,EAAKA,eAC9D,uBAAGgB,UAAU,eAAe1B,EAAI6B,UAAUC,SAE3C,yBAAKJ,UAAW,gBAAkB1B,EAAI6B,UAAUC,QAC/C,kBAAC,EAAD,CAAO9B,IAAKA,IACW,WAAtBA,EAAI6B,UAAUC,OAAkB,kBAACnB,EAAA,EAAD,YAAqB,QAIpE,yBAAKe,UAAW,OAASvC,KAAKY,MAAMpE,UAAUW,OAAS,EAAE,GAAG,YACzDiF,Q,GA5COrB,IAAMK,YCK1BwB,E,YAEJ,WAAYhC,GAAQ,IAAD,8BACjB,4CAAMA,KACDqB,MAAQ,CAAEY,cAAa,EAAOhB,WAAU,GAC7C,EAAK1B,MAAQ,IAAIJ,EACjB,EAAKI,MAAM2C,OACX,EAAKxB,OAAS,IAAIJ,SALD,E,sEASX,IAAD,OAgBN,OAAO,yBAAKqB,UAAU,aACX,kBAAC,IAAD,CACEA,UAAY,sBAAwBvC,KAAKiC,MAAMY,aAAa,GAAG,oBAC/DE,oBAAoB,cACpBC,SAlBS,SAACC,GACrB/B,qBAAsB+B,EAAM,IAAIC,MAAM,SAAQrC,GAAR,SAAA9D,EAAAC,OAAA,uDACpC,EAAK6D,IAAMA,EACX,EAAKA,IAAI6B,UAAY,CAAC,OAAU,QAFI,WAAA3F,EAAA,MAGjB,EAAKoD,MAAMgD,QAAQtC,EAAK,IAHP,OAGpC,EAAKuC,MAH+B,OAIpC,EAAKA,MAAMV,UAAY,CAAC,OAAU,WAClC,EAAKR,SAAS,CAAEW,cAAa,IALO,yCAkB3BQ,QATQ,SAACC,EAAOC,GAC3B5B,QAAQC,IAAI,cAAgB0B,EAAME,KAAO,KAAOF,EAAMG,UAS3CC,QAAS,CAAC,WACVC,UAAQ,EACRC,SAAU,EACVC,YAAa,IACbC,YAAa,EACbC,WAAS,GAET,yBAAKxB,UAAU,8BAAf,uCAIJ,kBAAC,EAAD,CAAa/F,UAAW,CAACwD,KAAKa,IAAKb,KAAKoD,OAAOhF,QAAO,SAACyC,GAAD,YAAiB7B,IAAR6B,Y,GA5CrDE,IAAMK,WAkD5B4C,IAASC,OAAO,kBAAC,EAAD,MAAa3D,SAAS4D,eAAe,SNqE/C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMnB,MAAK,SAAAoB,GACjCA,EAAaC,kB","file":"static/js/main.01638526.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { sequences } from '@magenta/music';\nconst { quantizeNoteSequence, clone } = sequences;\n\nconst STEPS_PER_BAR = 16;\nconst STEPS_PER_QUARTER = 4;\n\n/**\n * Reconstructs unquantized sequence by breaking it into as large of chunks as\n * possible that are supported by the given models.\n *\n * @param inSeq the NoteSequence to reconstruct.\n * @param models a list of MusicVAE models where the value of `index + 1`\n * specifies the number of bars that the model supports for reconstruction.\n * @param temperature the sampling temperature to use in reconstruction.\n **/\nexport async function reconstructBySize(inSeq, models, temperature=1) {\n  inSeq = quantizeNoteSequence(inSeq, STEPS_PER_QUARTER);\n\n  // Process in as large of chunks as possible.\n  const maxChunkSize = models.length * STEPS_PER_BAR;\n  const secondsPerStep = 1 / sequences.stepsPerQuarterToStepsPerSecond(\n      STEPS_PER_QUARTER, inSeq.tempos[0].qpm);\n  const outputs = [];\n  for (let startOffset = 0; startOffset < inSeq.totalQuantizedSteps; startOffset+=maxChunkSize){\n    const chunk = clone(inSeq);\n    const endOffset = Math.min(startOffset + maxChunkSize, inSeq.totalQuantizedSteps);\n    chunk.notes = inSeq.notes\n      .map(n => Object.assign({}, n))\n      .filter(n => startOffset <= n.quantizedStartStep && n.quantizedStartStep < endOffset)\n      .map(n => {\n        n.startTime -= startOffset * secondsPerStep;\n        n.endTime -= startOffset * secondsPerStep;\n        n.quantizedStartStep -= startOffset;\n        n.quantizedEndStep -= startOffset;\n        return n;\n      })\n    chunk.totalQuantizedSteps = endOffset - startOffset;\n    chunk.totalTime = chunk.totalQuantizedSteps * secondsPerStep;\n\n    // Select model based on the number of actual bars in the chunk.\n    const numBars = Math.ceil(chunk.totalQuantizedSteps / STEPS_PER_BAR);\n    const modelIndex = numBars - 1;\n    const z = await models[modelIndex].encode([chunk]);\n    const output = await models[modelIndex].decode(z, temperature, undefined, undefined, inSeq.tempos[0].qpm);\n    z.dispose();\n    outputs.push(output[0]);\n  }\n  const reconstruction = concat(...outputs);\n  return reconstruction;\n}\n\nfunction concat(...args) {\n  if (args.length === 2){\n    const [seqA, seqB] = args;\n    const outputSequence = clone(seqA);\n    seqB.notes.forEach(note => {\n      const clonedNote = Object.assign({}, note);\n      clonedNote.startTime += seqA.totalTime;\n      clonedNote.endTime += seqA.totalTime;\n      outputSequence.notes.push(clonedNote);\n    })\n    outputSequence.totalTime = seqA.totalTime + seqB.totalTime;\n    return outputSequence;\n  } else if (args.length > 2){\n    // Recurse.\n    const first = args.shift()\n    return concat(first, concat(...args));\n  } else {\n    // Nothing to concat.\n    return args[0];\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { MusicVAE } from '@magenta/music';\nimport { reconstructBySize } from './shared';\n\nconst modelPath = 'http://storage.googleapis.com/magentadata/js/checkpoints/';\n\nexport class Model {\n\tconstructor() {\n\n\t\tconst models = [\n\t\t\tmodelPath + 'groovae/tap2drum_1bar',\n\t\t\tmodelPath + 'groovae/tap2drum_2bar',\n\t\t\tmodelPath + 'groovae/tap2drum_3bar',\n\t\t\tmodelPath + 'groovae/tap2drum_4bar'\n\t\t];\n\n\t\tthis.models = models.map(url => new MusicVAE(url));\n\t}\n\n\tasync load() {\n\t\ttry {\n\t\t\tawait this.model.initialize();\n\t\t} catch (e){\n\t\t\tconst snackbar = document.createElement('magenta-snackbar');\n\t\t\tsnackbar.setAttribute('message', e);\n\t\t\tdocument.body.appendChild(snackbar);\n\t\t}\n\t}\n\n\tasync drumify(inSeq, temperature=1) {\n\t\treturn await reconstructBySize(inSeq, this.models, temperature);\n\t}\n}\n","import React from 'react';\nimport * as mm from '@magenta/music';\n\nclass Track extends React.Component {\n  constructor(props) {\n    super(props);\n    this.seq = props.seq;\n    this.ref = React.createRef();\n  }\n\n  componentDidMount(){\n    this.pianoRoll = new mm.PianoRollSVGVisualizer(this.seq, this.ref.current);\n  }\n\n\n  render(){\n     return <svg ref={this.ref}/>\n  }\n}\n\nexport default Track;\n","import React from 'react';\nimport Button from 'react-bootstrap/Button';\n\nclass PlayButton extends React.Component {\n  constructor(props) {\n    super(props);\n    this.player = props.player;\n    this.seq = props.seq;\n    this.onTogglePlay = props.onTogglePlay;\n  }\n\n  render(){\n    const startOrStop = (seq) => {\n      console.log(seq);\n       if (this.player.isPlaying()) {\n         this.player.stop();\n       } else {\n         this.player.start(seq);\n       }\n       this.onTogglePlay()\n     }\n\n     return   <Button\n               variant=\"primary\"\n               onClick={() => startOrStop(this.seq)}\n              >\n                {this.player.isPlaying()?\"stop\":\"play\"}\n             </Button>\n  }\n}\n\nexport default PlayButton;\n","import React from 'react';\nimport * as mm from '@magenta/music';\nimport Track from './track'\nimport PlayButton from './playBtn'\nimport './styles.css';\nimport Button from 'react-bootstrap/Button';\n\nclass TrackCanvas extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { isPlaying:false }\n    this.onTogglePlay = () => { this.setState({ isPlaying: this.player.isPlaying() }) }\n    this.player = new mm.Player(false, {\n      run: () => {},\n      stop: this.onTogglePlay\n    });\n    this.sequences = props.sequences;\n  }\n\n render(){\n\n    const combineSeqs = (sequences) =>{\n      let newSeq = Object.assign({}, sequences[0]);\n      let notes = []\n      sequences.forEach((seq)=>{ notes.push(...seq.notes) })\n      newSeq.notes = notes;\n      return newSeq;\n    }\n\n    const onTogglePlay = () => {\n      this.setState({ isPlaying: this.player.isPlaying() })\n    }\n\n    let PlayAllBtn = this.props.sequences.length > 0?<PlayButton seq={combineSeqs(this.props.sequences)}\n                                                                 player={this.player}\n                                                                 onTogglePlay={this.onTogglePlay}/>:\"\";\n\n    return <div className=\"tracks container\">\n                {this.props.sequences.map((seq, index)=> {\n                  return <div className=\"row\" key={index} >\n                            <div className=\"col-1 my-auto\">\n                              <PlayButton seq={seq} player={this.player} onTogglePlay={this.onTogglePlay}/>\n                              <p className=\"origin-info\">{seq.trackInfo.origin}</p>\n                            </div>\n                             <div className={\"col-11 track \" + seq.trackInfo.origin}>\n                              <Track seq={seq}/>\n                              {seq.trackInfo.origin==\"drumify\"?<Button>mix</Button>:\"\"}\n                             </div>\n                           </div>\n                })}\n                <div className={\"row\" + (this.props.sequences.length > 0?\"\":\" d-none\")}>\n                  {PlayAllBtn}\n                </div>\n            </div>\n }\n}\n\nexport default TrackCanvas;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport * as serviceWorker from './serviceWorker';\nimport Files from 'react-files'\nimport * as mm from '@magenta/music';\nimport { Model } from './Model'\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport TrackCanvas from \"./trackCanvas/trackCanvas\"\n//require('typeface-roboto')\n\n\nclass Drummer extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = { isFileLoaded:false, isPlaying:false }\n    this.model = new Model();\n    this.model.load();\n    this.player = new mm.Player();\n  }\n\n\n render(){\n\n   const onFilesChange = (files) => {\n     mm.blobToNoteSequence(files[0]).then( async  (seq) =>  {\n       this.seq = seq;\n       this.seq.trackInfo = {\"origin\": \"file\"}\n       this.drums = await this.model.drumify(seq, 1);\n       this.drums.trackInfo = {\"origin\": \"drumify\"}\n       this.setState({ isFileLoaded:true })\n     } )\n   }\n\n   const onFilesError = (error, file) => {\n     console.log('error code ' + error.code + ': ' + error.message);\n   }\n\n   return <div className=\"container\">\n              <Files\n                className={ 'files-dropzone row' + (this.state.isFileLoaded?'':' no-files-droped') }\n                dropActiveClassName=\"drop-active\"\n                onChange={onFilesChange}\n                onError={onFilesError}\n                accepts={['audio/*']}\n                multiple\n                maxFiles={3}\n                maxFileSize={10000000}\n                minFileSize={0}\n                clickable\n              >\n                <div className=\"col-12 text-center my-auto\">\n                  Drop files here or click to upload\n                </div>\n            </Files>\n            <TrackCanvas sequences={[this.seq, this.drums].filter((seq) => seq !== undefined)}/>\n\n        </div>\n }\n}\n\nReactDOM.render(<Drummer />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}